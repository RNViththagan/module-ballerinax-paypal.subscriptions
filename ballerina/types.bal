// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# OAuth2 Client Credentials Grant Configs
public type OAuth2ClientCredentialsGrantConfig record {|
    *http:OAuth2ClientCredentialsGrantConfig;
    # Token URL
    string tokenUrl = "https://api-m.sandbox.paypal.com/v1/billing/v1/oauth2/token";
|};

# The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
@constraint:String {maxLength: 254}
public type Email string;

# The account identifier for a PayPal account
@constraint:String {maxLength: 13, minLength: 13, pattern: re `^[2-9A-HJ-NP-Z]{13}$`}
public type AccountId string;

# The response to a request to update the quantity of the product or service in a subscription. You can also use this method to switch the plan and update the `shipping_amount` and `shipping_address` values for the subscription. This type of update requires the buyer's consent
public type SubscriptionReviseResponse record {
    *SubscriptionReviseRequest;
    *SubscriptionReviseResponseAllOf2;
};

# The update pricing scheme request details
public type UpdatePricingSchemeRequest record {
    # The billing cycle sequence
    @jsondata:Name {value: "billing_cycle_sequence"}
    int billingCycleSequence;
    @jsondata:Name {value: "pricing_scheme"}
    PricingScheme pricingScheme;
};

# The payment source definition. To be eligible to create subscription using debit or credit card, you will need to sign up here (https://www.paypal.com/bizsignup/entry/product/ppcp). Please note, its available only for non-3DS cards and for merchants in US and AU regions
public type PaymentSource record {
    # The payment card to use to fund a payment. Can be a credit or debit card
    Card card?;
};

# The card network or brand. Applies to credit, debit, gift, and payment cards
public type CardBrand "VISA"|"MASTERCARD"|"DISCOVER"|"AMEX"|"SOLO"|"JCB"|"STAR"|"DELTA"|"SWITCH"|"MAESTRO"|"CB_NATIONALE"|"CONFIGOGA"|"CONFIDIS"|"ELECTRON"|"CETELEM"|"CHINA_UNION_PAY";

# The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
@constraint:String {maxLength: 64, minLength: 20, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$`}
public type DateTime string;

public type TransactionAllOf2 record {
    # The PayPal-generated transaction ID.
    @constraint:String {maxLength: 50, minLength: 3}
    string id?;
    # The breakdown details for the amount. Includes the gross, tax, fee, and shipping amounts
    AmountWithBreakdown amount_with_breakdown?;
    # The name of the party
    Name payer_name?;
    # The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
    EmailAddress payer_email?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    DateTime time?;
};

# The name of the party
public type Name record {
    # When the party is a person, the party's full name
    @jsondata:Name {value: "full_name"}
    string fullName?;
    # The prefix, or title, to the party's name
    @constraint:String {maxLength: 140}
    string prefix?;
    # When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname
    @constraint:String {maxLength: 140}
    string surname?;
    # When the party is a person, the party's given, or first, name
    @jsondata:Name {value: "given_name"}
    string givenName?;
    # When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name
    @jsondata:Name {value: "middle_name"}
    string middleName?;
    # The suffix for the party's name
    @constraint:String {maxLength: 140}
    string suffix?;
    # DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business
    @jsondata:Name {value: "alternate_full_name"}
    string alternateFullName?;
};

# The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency
@constraint:String {maxLength: 3, minLength: 3}
public type CurrencyCode string;

# The payment preferences for a subscription
public type PaymentPreferences record {
    @jsondata:Name {value: "setup_fee"}
    Money setupFee?;
    # The action to take on the subscription if the initial payment for the setup fails
    @jsondata:Name {value: "setup_fee_failure_action"}
    "CONTINUE"|"CANCEL" setupFeeFailureAction = "CANCEL";
    # Indicates whether to automatically bill the outstanding amount in the next billing cycle
    @jsondata:Name {value: "auto_bill_outstanding"}
    boolean autoBillOutstanding = true;
    # The maximum number of payment failures before a subscription is suspended. For example, if `payment_failure_threshold` is `2`, the subscription automatically updates to the `SUSPEND` state if two consecutive payments fail
    @jsondata:Name {value: "payment_failure_threshold"}
    int paymentFailureThreshold = 0;
};

# Status of Authentication eligibility
public type Enrolled "Y"|"N"|"U"|"B";

# The list transactions for a subscription request details
public type TransactionsList record {
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links)
    @constraint:Array {maxLength: 10, minLength: 1}
    LinkDescription[] links?;
    # The total number of pages
    @jsondata:Name {value: "total_pages"}
    int totalPages?;
    # An array of transactions
    @constraint:Array {maxLength: 32767}
    Transaction[] transactions?;
    # The total number of items
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# The application context, which customizes the payer experience during the subscription approval process with PayPal
public type ApplicationContext record {
    # Configures the label name to `Continue` or `Subscribe Now` for subscription consent experience
    @jsondata:Name {value: "user_action"}
    "CONTINUE"|"SUBSCRIBE_NOW" userAction = "SUBSCRIBE_NOW";
    # The URL where the customer is redirected after the customer approves the payment
    @jsondata:Name {value: "return_url"}
    string returnUrl;
    # The label that overrides the business name in the PayPal account on the PayPal site
    @jsondata:Name {value: "brand_name"}
    string brandName?;
    # The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/)
    Language locale?;
    # The URL where the customer is redirected after the customer cancels the payment
    @jsondata:Name {value: "cancel_url"}
    string cancelUrl;
    # The location from which the shipping address is derived
    @jsondata:Name {value: "shipping_preference"}
    "GET_FROM_FILE"|"NO_SHIPPING"|"SET_PROVIDED_ADDRESS" shippingPreference = "GET_FROM_FILE";
    @jsondata:Name {value: "payment_method"}
    PaymentMethod paymentMethod?;
};

# The phone information
public type PhoneWithType record {
    @jsondata:Name {value: "phone_type"}
    PhoneType phoneType?;
    @jsondata:Name {value: "phone_number"}
    Phone phoneNumber;
};

# The details of the captured payment status
public type CaptureStatusDetails record {
    # The reason why the captured payment status is `PENDING` or `DENIED`
    "BUYER_COMPLAINT"|"CHARGEBACK"|"ECHECK"|"INTERNATIONAL_WITHDRAWAL"|"OTHER"|"PENDING_REVIEW"|"RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION"|"REFUNDED"|"TRANSACTION_APPROVED_AWAITING_FUNDING"|"UNILATERAL"|"VERIFICATION_REQUIRED" reason?;
};

# The subscriber response information
public type Subscriber record {
    *Payer;
    *SubscriberAllOf2;
};

# The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required
public type TaxInfo record {
    # The customer's tax ID type
    @jsondata:Name {value: "tax_id_type"}
    "BR_CPF"|"BR_CNPJ" taxIdType;
    # The customer's tax ID value
    @jsondata:Name {value: "tax_id"}
    string taxId;
};

# The pricing scheme details
public type PricingScheme record {
    # An array of pricing tiers which are used for billing volume/tiered plans. pricing_model field has to be specified
    @constraint:Array {maxLength: 32, minLength: 1}
    PricingTier[] tiers?;
    @jsondata:Name {value: "update_time"}
    DateTime updateTime?;
    @jsondata:Name {value: "create_time"}
    DateTime createTime?;
    # The pricing model for tiered plan. The `tiers` parameter is required
    @jsondata:Name {value: "pricing_model"}
    "VOLUME"|"TIERED" pricingModel?;
    @jsondata:Name {value: "fixed_price"}
    Money fixedPrice?;
    # The version of the pricing scheme
    @constraint:Int {minValue: 0, maxValue: 999}
    int version?;
};

# The payment source used to fund the payment
public type PaymentSourceResponse record {
    # The payment card used to fund the payment. Card can be a credit or debit card
    CardResponseWithBillingAddress card?;
};

# An inline plan object to customise the subscription. You can override plan level default attributes by providing customised values for the subscription in this object
public type PlanOverride record {
    @jsondata:Name {value: "payment_preferences"}
    PaymentPreferencesOverride paymentPreferences?;
    # An array of billing cycles for trial billing and regular billing. The subscription billing cycle definition has to adhere to the plan billing cycle definition
    @jsondata:Name {value: "billing_cycles"}
    BillingCycleOverride[] billingCycles?;
    # The tax details
    TaxesOverride taxes?;
};

# The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)
@constraint:String {maxLength: 7, minLength: 7, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])$`}
public type DateYearMonth string;

# The create subscription request details
public type SubscriptionRequestPost record {
    @jsondata:Name {value: "shipping_amount"}
    Money shippingAmount?;
    @jsondata:Name {value: "start_time"}
    DateTime startTime?;
    # The quantity of the product in the subscription
    @constraint:String {maxLength: 32, minLength: 1, pattern: re `^([0-9]+|([0-9]+)?[.][0-9]+)$`}
    string quantity?;
    # The subscriber request information 
    SubscriberRequest subscriber?;
    # The custom id for the subscription. Can be invoice id
    @jsondata:Name {value: "custom_id"}
    string customId?;
    @jsondata:Name {value: "application_context"}
    ApplicationContext applicationContext?;
    # An inline plan object to customise the subscription. You can override plan level default attributes by providing customised values for the subscription in this object
    PlanOverride plan?;
    # The ID of the plan
    @jsondata:Name {value: "plan_id"}
    string planId;
    # DEPRECATED. Indicates whether the subscription auto-renews after the billing cycles complete
    #
    # # Deprecated
    @jsondata:Name {value: "auto_renewal"}
    @deprecated
    boolean autoRenewal = false;
};

# Represents the Headers record for the operation: plans.create
public type PlansCreateHeaders record {
    # The server stores keys for 72 hours
    @http:Header {name: "PayPal-Request-Id"}
    string payPalRequestId?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    @http:Header {name: "Prefer"}
    string prefer = "return=minimal";
};

public type SubscriberAllOf2 record {
    # The shipping details
    ShippingDetail shipping_address?;
    # The payment source used to fund the payment
    PaymentSourceResponse payment_source?;
};

# The subscription details
public type Subscription record {
    *SubscriptionStatus;
    *SubscriptionAllOf2;
};

# The cancel subscription request details
public type SubscriptionCancelRequest record {
    # The reason for the cancellation of a subscription
    @constraint:String {maxLength: 128, minLength: 1}
    string reason;
};

# Represents the Queries record for the operation: subscriptions.get
public type SubscriptionsGetQueries record {
    # List of fields that are to be returned in the response. Possible value for fields are last_failed_payment and plan
    @constraint:String {maxLength: 100, minLength: 1}
    string fields?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    OAuth2ClientCredentialsGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type SubscriptionReviseResponseAllOf2 record {
    # Indicates whether the subscription has overridden any plan attributes.
    boolean plan_overridden?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    LinkDescription[] links?;
};

# The customer who approves and pays for the order. The customer is also known as the payer
public type Payer record {
    *PayerBase;
    *PayerAllOf2;
};

public type SubscriptionAllOf2 record {
    # The PayPal-generated ID for the subscription.
    @constraint:String {maxLength: 50, minLength: 3}
    string id?;
    # The ID of the plan.
    @constraint:String {maxLength: 50, minLength: 3}
    string plan_id?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    DateTime start_time?;
    # The quantity of the product in the subscription.
    @constraint:String {maxLength: 32, minLength: 1, pattern: re `^([0-9]+|([0-9]+)?[.][0-9]+)$`}
    string quantity?;
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money shipping_amount?;
    # The subscriber response information
    Subscriber subscriber?;
    # The billing details for the subscription. If the subscription was or is active, these fields are populated
    SubscriptionBillingInfo billing_info?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    DateTime create_time?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    DateTime update_time?;
    # The custom id for the subscription. Can be invoice id.
    @constraint:String {maxLength: 127, minLength: 1}
    string custom_id?;
    # Indicates whether the subscription has overridden any plan attributes.
    boolean plan_overridden?;
    # The plan details
    Plan plan?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    LinkDescription[] links?;
};

# The billing cycle details
public type BillingCycle record {
    # The order in which this cycle is to run among other billing cycles. For example, a trial billing cycle has a `sequence` of `1` while a regular billing cycle has a `sequence` of `2`, so that trial cycle runs before the regular cycle
    @constraint:Int {minValue: 1, maxValue: 99}
    int sequence;
    # The tenure type of the billing cycle. In case of a plan having trial cycle, only 2 trial cycles are allowed per plan
    @jsondata:Name {value: "tenure_type"}
    "REGULAR"|"TRIAL" tenureType;
    # The number of times this billing cycle gets executed. Trial billing cycles can only be executed a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>). Regular billing cycles can be executed infinite times (value of <code>0</code> for <code>total_cycles</code>) or a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>)
    @jsondata:Name {value: "total_cycles"}
    int totalCycles = 1;
    @jsondata:Name {value: "pricing_scheme"}
    PricingScheme pricingScheme?;
    # The frequency of the billing cycle
    Frequency frequency;
};

# Results of 3D Secure Authentication
public type ThreeDSecureAuthenticationResponse record {
    @jsondata:Name {value: "authentication_status"}
    ParesStatus authenticationStatus?;
    @jsondata:Name {value: "enrollment_status"}
    Enrolled enrollmentStatus?;
};

# The suspend subscription request details
public type SubscriptionSuspendRequest record {
    # The reason for suspenson of the subscription
    @constraint:String {maxLength: 128, minLength: 1}
    string reason;
};

# An array of JSON patch objects to apply partial updates to resources
public type PatchRequest Patch[];

# The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute)
public type AddressPortable record {
    @jsondata:Name {value: "country_code"}
    CountryCode countryCode;
    # The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul>
    @jsondata:Name {value: "admin_area_1"}
    string adminArea1?;
    # The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address
    @jsondata:Name {value: "address_line_1"}
    string addressLine1?;
    # A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul>
    @jsondata:Name {value: "admin_area_3"}
    string adminArea3?;
    @jsondata:Name {value: "address_details"}
    AddressDetails addressDetails?;
    # A city, town, or village. Smaller than `admin_area_level_1`
    @jsondata:Name {value: "admin_area_2"}
    string adminArea2?;
    # The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address
    @jsondata:Name {value: "address_line_3"}
    string addressLine3?;
    # The second line of the address. For example, suite or apartment number
    @jsondata:Name {value: "address_line_2"}
    string addressLine2?;
    # The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul>
    @jsondata:Name {value: "admin_area_4"}
    string adminArea4?;
    # The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code)
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
};

# The payment preferences to override at subscription level
public type PaymentPreferencesOverride record {
    @jsondata:Name {value: "setup_fee"}
    Money setupFee?;
    # The action to take on the subscription if the initial payment for the setup fails
    @jsondata:Name {value: "setup_fee_failure_action"}
    "CONTINUE"|"CANCEL" setupFeeFailureAction?;
    # Indicates whether to automatically bill the outstanding amount in the next billing cycle
    @jsondata:Name {value: "auto_bill_outstanding"}
    boolean autoBillOutstanding?;
    # The maximum number of payment failures before a subscription is suspended. For example, if `payment_failure_threshold` is `2`, the subscription automatically updates to the `SUSPEND` state if two consecutive payments fail
    @jsondata:Name {value: "payment_failure_threshold"}
    int paymentFailureThreshold?;
};

# The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
@constraint:String {maxLength: 254, minLength: 3, pattern: re `^.+@[^"\-].+$`}
public type EmailAddress string;

# The payment card to use to fund a payment. Can be a credit or debit card
public type Card record {
    # The primary account number (PAN) for the payment card
    @constraint:String {maxLength: 19, minLength: 13}
    string number;
    # The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`
    @jsondata:Name {value: "security_code"}
    string securityCode?;
    # The card holder's name as it appears on the card
    @constraint:String {maxLength: 300}
    string name?;
    @jsondata:Name {value: "billing_address"}
    AddressPortable billingAddress?;
    # The PayPal-generated ID for the card
    string id?;
    # The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)
    DateYearMonth expiry;
    @jsondata:Name {value: "card_type"}
    CardBrand cardType?;
    # The last digits of the payment card
    @jsondata:Name {value: "last_digits"}
    string lastDigits?;
};

# Represents the Headers record for the operation: subscriptions.create
public type SubscriptionsCreateHeaders record {
    # The server stores keys for 72 hours
    @http:Header {name: "PayPal-Request-Id"}
    string payPalRequestId?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    @http:Header {name: "Prefer"}
    string prefer = "return=minimal";
};

# The tax details
public type Taxes record {
    # Indicates whether the tax was already included in the billing amount
    boolean inclusive = true;
    # The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`
    Percentage percentage;
};

# The update pricing scheme request details
public type UpdatePricingSchemesListRequest record {
    # An array of pricing schemes
    @jsondata:Name {value: "pricing_schemes"}
    UpdatePricingSchemeRequest[] pricingSchemes;
};

# The phone type
public type PhoneType "FAX"|"HOME"|"MOBILE"|"OTHER"|"PAGER";

# The transaction details
public type Transaction record {
    *CaptureStatus;
    *TransactionAllOf2;
    DateTime time;
    AmountWithBreakdown amount_with_breakdown;
    string id;
};

# The payment card to use to fund a payment. Card can be a credit or debit card
public type CardResponse record {
    @jsondata:Name {value: "authentication_result"}
    AuthenticationResponse authenticationResult?;
    # The payment card type
    "CREDIT"|"DEBIT"|"PREPAID"|"UNKNOWN" 'type?;
    # The last digits of the payment card
    @jsondata:Name {value: "last_digits"}
    string lastDigits?;
    # The card network or brand. Applies to credit, debit, gift, and payment cards
    CardBrand brand?;
};

# The create plan request details
public type PlanRequestPOST record {
    # Indicates whether you can subscribe to this plan by providing a quantity for the goods or service
    @jsondata:Name {value: "quantity_supported"}
    boolean quantitySupported = false;
    @jsondata:Name {value: "payment_preferences"}
    PaymentPreferences paymentPreferences;
    # The ID of the product created through Catalog Products API
    @jsondata:Name {value: "product_id"}
    string productId;
    # The plan name
    @constraint:String {maxLength: 127, minLength: 1}
    string name;
    # An array of billing cycles for trial billing and regular billing. A plan can have at most two trial cycles and only one regular cycle
    @jsondata:Name {value: "billing_cycles"}
    BillingCycle[] billingCycles;
    # The detailed description of the plan
    @constraint:String {maxLength: 127, minLength: 1}
    string description?;
    # The tax details
    Taxes taxes?;
    # The initial state of the plan. Allowed input values are CREATED and ACTIVE
    "CREATED"|"INACTIVE"|"ACTIVE" status = "ACTIVE";
};

# The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years
@constraint:String {maxLength: 10, minLength: 10, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$`}
public type DateNoTime string;

# The customer and merchant payment preferences
public type PaymentMethod record {
    # The customer-selected payment method on the merchant site
    @jsondata:Name {value: "payer_selected"}
    string payerSelected = "PAYPAL";
    @jsondata:Name {value: "payee_preferred"}
    PayeePaymentMethodPreference payeePreferred?;
    # NACHA (the regulatory body governing the ACH network) requires that API callers (merchants, partners) obtain the consumer’s explicit authorization before initiating a transaction. To stay compliant, you’ll need to make sure that you retain a compliant authorization for each transaction that you originate to the ACH Network using this API. ACH transactions are categorized (using SEC codes) by how you capture authorization from the Receiver (the person whose bank account is being debited or credited). PayPal supports the following SEC codes
    @jsondata:Name {value: "standard_entry_class_code"}
    "TEL"|"WEB"|"CCD"|"PPD" standardEntryClassCode = "WEB";
};

# The subscriber request information 
public type SubscriberRequest record {
    *Payer;
    *SubscriberRequestAllOf2;
};

# The status of a captured payment
public type CaptureStatus record {
    @jsondata:Name {value: "status_details"}
    CaptureStatusDetails statusDetails?;
    # The status of the captured payment
    "COMPLETED"|"DECLINED"|"PARTIALLY_REFUNDED"|"PENDING"|"REFUNDED" status?;
};

# The JSON patch object to apply partial updates to resources
public type Patch record {
    # The operation
    "add"|"remove"|"replace"|"move"|"copy"|"test" op;
    # The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location at which to complete the operation
    string path?;
    # The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation
    string 'from?;
    # The value to apply. The <code>remove</code> operation does not require a value
    anydata value?;
};

# The details for the failed payment of the subscription
public type FailedPaymentDetails record {
    # The reason code for the payment failure
    @jsondata:Name {value: "reason_code"}
    "PAYMENT_DENIED"|"INTERNAL_SERVER_ERROR"|"PAYEE_ACCOUNT_RESTRICTED"|"PAYER_ACCOUNT_RESTRICTED"|"PAYER_CANNOT_PAY"|"SENDING_LIMIT_EXCEEDED"|"TRANSACTION_RECEIVING_LIMIT_EXCEEDED"|"CURRENCY_MISMATCH" reasonCode?;
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount;
    @jsondata:Name {value: "next_payment_retry_time"}
    DateTime nextPaymentRetryTime?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    DateTime time;
};

# The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information
public type LinkDescription record {
    # The HTTP method required to make the related call
    "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"CONNECT"|"OPTIONS"|"PATCH" method?;
    # The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml)
    string rel;
    # The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call
    string href;
};

# The shipping details
public type ShippingDetail record {
    # The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute)
    AddressPortable address?;
    # The name of the party
    Name name?;
    # The method by which the payer wants to get their items from the payee e.g shipping, in-person pickup. Either type or options but not both may be present
    "SHIPPING"|"PICKUP_IN_PERSON" 'type?;
};

# Represents the Queries record for the operation: subscriptions.transactions
public type SubscriptionsTransactionsQueries record {
    # The start time of the range of transactions to list
    @http:Query {name: "start_time"}
    string startTime;
    # The end time of the range of transactions to list
    @http:Query {name: "end_time"}
    string endTime;
};

# The tax details
public type TaxesOverride record {
    # Indicates whether the tax was already included in the billing amount
    boolean inclusive?;
    # The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`
    Percentage percentage?;
};

# Liability shift indicator. The outcome of the issuer's authentication
public type LiabilityShift "YES"|"NO"|"POSSIBLE"|"UNKNOWN";

# The breakdown details for the amount. Includes the gross, tax, fee, and shipping amounts
public type AmountWithBreakdown record {
    @jsondata:Name {value: "shipping_amount"}
    Money shippingAmount?;
    @jsondata:Name {value: "tax_amount"}
    Money taxAmount?;
    @jsondata:Name {value: "fee_amount"}
    Money feeAmount?;
    @jsondata:Name {value: "total_item_amount"}
    Money totalItemAmount?;
    @jsondata:Name {value: "gross_amount"}
    Money grossAmount;
    @jsondata:Name {value: "net_amount"}
    Money netAmount?;
};

# The currency and amount for a financial transaction, such as a balance or payment due
public type Money record {
    # The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/docs/integration/direct/rest/currency-codes/)
    @constraint:String {maxLength: 32, pattern: re `^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$`}
    string value;
    @jsondata:Name {value: "currency_code"}
    CurrencyCode currencyCode;
};

# The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/)
@constraint:String {maxLength: 10, minLength: 2, pattern: re `^[a-z]{2}(?:-[A-Z][a-z]{3})?(?:-(?:[A-Z]{2}))?$`}
public type Language string;

# The details for the last payment
public type LastPaymentDetails LastPaymentDetailsAllOf1;

# The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en)
public type Phone record {
    # The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN)
    @jsondata:Name {value: "country_code"}
    string countryCode;
    # The extension number
    @jsondata:Name {value: "extension_number"}
    string extensionNumber?;
    # The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN)
    @jsondata:Name {value: "national_number"}
    string nationalNumber;
};

# The activate subscription request details
public type SubscriptionActivateRequest record {
    # The reason for activation of a subscription. Required to reactivate the subscription
    @constraint:String {maxLength: 128, minLength: 1}
    string reason?;
};

# Represents the Headers record for the operation: subscriptions.capture
public type SubscriptionsCaptureHeaders record {
    # The server stores keys for 72 hours
    @http:Header {name: "PayPal-Request-Id"}
    string payPalRequestId?;
};

# The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
@constraint:String {maxLength: 2, minLength: 2, pattern: re `^([A-Z]{2}|C2)$`}
public type CountryCode string;

# The pricing tier details
public type PricingTier record {
    # The starting quantity for the tier
    @jsondata:Name {value: "starting_quantity"}
    string startingQuantity;
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount;
    # The ending quantity for the tier. Optional for the last tier
    @jsondata:Name {value: "ending_quantity"}
    string endingQuantity?;
};

# The customer who approves and pays for the order. The customer is also known as the payer
public type PayerBase record {
    @jsondata:Name {value: "email_address"}
    Email emailAddress?;
    @jsondata:Name {value: "payer_id"}
    AccountId payerId?;
};

public type SubscriberRequestAllOf2 record {
    # The shipping details
    ShippingDetail shipping_address?;
    # The payment source definition. To be eligible to create subscription using debit or credit card, you will need to sign up here (https://www.paypal.com/bizsignup/entry/product/ppcp). Please note, its available only for non-3DS cards and for merchants in US and AU regions
    PaymentSource payment_source?;
};

# The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`
@constraint:String {pattern: re `^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$`}
public type Percentage string;

# The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`
public type AddressDetails record {
    # A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>
    @jsondata:Name {value: "building_name"}
    string buildingName?;
    # The street number
    @jsondata:Name {value: "street_number"}
    string streetNumber?;
    # The street type. For example, avenue, boulevard, road, or expressway
    @jsondata:Name {value: "street_type"}
    string streetType?;
    # The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment
    @jsondata:Name {value: "sub_building"}
    string subBuilding?;
    # The delivery service. Post office box, bag number, or post office name
    @jsondata:Name {value: "delivery_service"}
    string deliveryService?;
    # The street name. Just `Drury` in `Drury Lane`
    @jsondata:Name {value: "street_name"}
    string streetName?;
};

# Represents the Queries record for the operation: plans.list
public type PlansListQueries record {
    # Filters the response by a Product ID
    @http:Query {name: "product_id"}
    string productId?;
    # Filters the response by list of plan IDs. Filter supports upto 10 plan IDs
    @http:Query {name: "plan_ids"}
    string planIds?;
    # A non-zero integer which is the start index of the entire list of items to return in the response. The combination of `page=1` and `page_size=20` returns the first 20 items. The combination of `page=2` and `page_size=20` returns the next 20 items
    @constraint:Int {minValue: 1, maxValue: 100000}
    int page = 1;
    # Indicates whether to show the total count in the response
    @http:Query {name: "total_required"}
    boolean totalRequired = false;
    # The number of items to return in the response
    @http:Query {name: "page_size"}
    int pageSize = 10;
};

# Represents the Headers record for the operation: plans.list
public type PlansListHeaders record {
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    @http:Header {name: "Prefer"}
    string prefer = "return=minimal";
};

# The plan details
public type Plan record {
    # Indicates whether you can subscribe to this plan by providing a quantity for the goods or service
    @jsondata:Name {value: "quantity_supported"}
    boolean quantitySupported = false;
    @jsondata:Name {value: "update_time"}
    DateTime updateTime?;
    @jsondata:Name {value: "create_time"}
    DateTime createTime?;
    @jsondata:Name {value: "payment_preferences"}
    PaymentPreferences paymentPreferences?;
    # The ID for the product
    @jsondata:Name {value: "product_id"}
    string productId?;
    # The plan name
    @constraint:String {maxLength: 127, minLength: 1}
    string name?;
    # An array of billing cycles for trial billing and regular billing. A plan can have at most two trial cycles and only one regular cycle
    @jsondata:Name {value: "billing_cycles"}
    BillingCycle[] billingCycles?;
    # The detailed description of the plan
    @constraint:String {maxLength: 127, minLength: 1}
    string description?;
    # The tax details
    Taxes taxes?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links)
    @constraint:Array {maxLength: 10, minLength: 1}
    LinkDescription[] links?;
    # The unique PayPal-generated ID for the plan
    @constraint:String {maxLength: 50, minLength: 3}
    string id?;
    # The plan status
    "CREATED"|"INACTIVE"|"ACTIVE" status?;
};

# The charge amount from the subscriber
public type SubscriptionCaptureRequest record {
    # The reason or note for the subscription charge
    @constraint:String {maxLength: 128, minLength: 1}
    string note;
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount;
    # The type of capture
    @jsondata:Name {value: "capture_type"}
    "OUTSTANDING_BALANCE" captureType;
};

# Results of Authentication such as 3D Secure
public type AuthenticationResponse record {
    @jsondata:Name {value: "liability_shift"}
    LiabilityShift liabilityShift?;
    @jsondata:Name {value: "three_d_secure"}
    ThreeDSecureAuthenticationResponse threeDSecure?;
};

public type CardResponseWithBillingAddressAllOf2 record {
    # The card holder's name as it appears on the card.
    @constraint:String {maxLength: 300, minLength: 2}
    string name?;
    # The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute)
    AddressPortable billing_address?;
    # The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)
    DateYearMonth expiry?;
    # The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency
    CurrencyCode currency_code?;
};

public type LastPaymentDetailsAllOf1 record {
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    DateTime time?;
};

# The subscription status details
public type SubscriptionStatus record {
    # The reason or notes for the status of the subscription
    @jsondata:Name {value: "status_change_note"}
    string statusChangeNote?;
    # The status of the subscription
    "APPROVAL_PENDING"|"APPROVED"|"ACTIVE"|"SUSPENDED"|"CANCELLED"|"EXPIRED" status?;
    @jsondata:Name {value: "status_update_time"}
    DateTime statusUpdateTime?;
};

# The billing details for the subscription. If the subscription was or is active, these fields are populated
public type SubscriptionBillingInfo record {
    @jsondata:Name {value: "final_payment_time"}
    DateTime finalPaymentTime?;
    # The trial and regular billing executions
    @jsondata:Name {value: "cycle_executions"}
    CycleExecution[] cycleExecutions?;
    # The number of consecutive payment failures. Resets to `0` after a successful payment. If this reaches the `payment_failure_threshold` value, the subscription updates to the `SUSPENDED` state
    @jsondata:Name {value: "failed_payments_count"}
    int failedPaymentsCount;
    @jsondata:Name {value: "next_billing_time"}
    DateTime nextBillingTime?;
    @jsondata:Name {value: "last_failed_payment"}
    FailedPaymentDetails lastFailedPayment?;
    @jsondata:Name {value: "outstanding_balance"}
    Money outstandingBalance;
    @jsondata:Name {value: "last_payment"}
    LastPaymentDetails lastPayment?;
};

# The list of plans with details
public type PlanCollection record {
    # An array of plans
    @constraint:Array {maxLength: 32767}
    Plan[] plans?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links)
    @constraint:Array {maxLength: 10, minLength: 1}
    LinkDescription[] links?;
    # The total number of pages
    @jsondata:Name {value: "total_pages"}
    int totalPages?;
    # The total number of items
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# The request to update the quantity of the product or service in a subscription. You can also use this method to switch the plan and update the `shipping_amount` and `shipping_address` values for the subscription. This type of update requires the buyer's consent
public type SubscriptionReviseRequest record {
    @jsondata:Name {value: "shipping_amount"}
    Money shippingAmount?;
    # The quantity of the product or service in the subscription
    @constraint:String {maxLength: 32, minLength: 1, pattern: re `^([0-9]+|([0-9]+)?[.][0-9]+)$`}
    string quantity?;
    @jsondata:Name {value: "application_context"}
    ApplicationContext applicationContext?;
    @jsondata:Name {value: "shipping_address"}
    ShippingDetail shippingAddress?;
    # An inline plan object to customise the subscription. You can override plan level default attributes by providing customised values for the subscription in this object
    PlanOverride plan?;
    # The unique PayPal-generated ID for the plan
    @jsondata:Name {value: "plan_id"}
    string planId?;
};

# The frequency of the billing cycle
public type Frequency record {
    # The number of intervals after which a subscriber is billed. For example, if the `interval_unit` is `DAY` with an `interval_count` of  `2`, the subscription is billed once every two days. The following table lists the maximum allowed values for the `interval_count` for each `interval_unit`:<table><thead><tr><th><code>Interval unit</code></th><th>Maximum interval count</th></tr></thead><tbody><tr><td><code>DAY</code></td><td align="right">365</td></tr><tr><td><code>WEEK</code></td><td align="right">52</td></tr><tr><td><code>MONTH</code></td><td align="right">12</td></tr><tr><td><code>YEAR</code></td><td align="right">1</td></tr></tbody></table>
    @jsondata:Name {value: "interval_count"}
    int intervalCount = 1;
    # The interval at which the subscription is charged or billed
    @jsondata:Name {value: "interval_unit"}
    "DAY"|"WEEK"|"MONTH"|"YEAR" intervalUnit;
};

# The merchant-preferred payment methods
public type PayeePaymentMethodPreference "UNRESTRICTED"|"IMMEDIATE_PAYMENT_REQUIRED";

# Transactions status result identifier. The outcome of the issuer's authentication
public type ParesStatus "Y"|"N"|"U"|"A"|"C"|"R"|"D"|"I";

# The payment card used to fund the payment. Card can be a credit or debit card
public type CardResponseWithBillingAddress record {
    *CardResponse;
    *CardResponseWithBillingAddressAllOf2;
};

public type PayerAllOf2 record {
    # The name of the party
    Name name?;
    # The phone information
    PhoneWithType phone?;
    # The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years
    DateNoTime birth_date?;
    # The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required
    TaxInfo tax_info?;
    # The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute)
    AddressPortable address?;
};

# The billing cycle details to override at subscription level. The subscription billing cycle definition has to adhere to the plan billing cycle definition
public type BillingCycleOverride record {
    # The order in which this cycle is to run among other billing cycles. For example, a trial billing cycle has a `sequence` of `1` while a regular billing cycle has a `sequence` of `2`, so that trial cycle runs before the regular cycle
    @constraint:Int {minValue: 1, maxValue: 99}
    int sequence;
    # The number of times this billing cycle gets executed. Trial billing cycles can only be executed a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>). Regular billing cycles can be executed infinite times (value of <code>0</code> for <code>total_cycles</code>) or a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>)
    @jsondata:Name {value: "total_cycles"}
    int totalCycles?;
    @jsondata:Name {value: "pricing_scheme"}
    PricingScheme pricingScheme?;
};

# The regular and trial execution details for a billing cycle
public type CycleExecution record {
    # The order in which to run this cycle among other billing cycles
    @constraint:Int {minValue: 0, maxValue: 99}
    int sequence;
    # For a finite billing cycle, cycles_remaining is the number of remaining cycles. For an infinite billing cycle, cycles_remaining is set as 0
    @jsondata:Name {value: "cycles_remaining"}
    int cyclesRemaining?;
    # The type of the billing cycle
    @jsondata:Name {value: "tenure_type"}
    "REGULAR"|"TRIAL" tenureType;
    # The number of billing cycles that have completed
    @jsondata:Name {value: "cycles_completed"}
    int cyclesCompleted;
    # The active pricing scheme version for the billing cycle
    @jsondata:Name {value: "current_pricing_scheme_version"}
    int currentPricingSchemeVersion?;
    # The number of times this billing cycle gets executed. Trial billing cycles can only be executed a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>). Regular billing cycles can be executed infinite times (value of <code>0</code> for <code>total_cycles</code>) or a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>)
    @jsondata:Name {value: "total_cycles"}
    int totalCycles?;
};
