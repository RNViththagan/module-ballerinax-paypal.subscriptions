// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/http;

# OAuth2 Client Credentials Grant Configs
public type OAuth2ClientCredentialsGrantConfig record {|
    *http:OAuth2ClientCredentialsGrantConfig;
    # Token URL
    string tokenUrl = "https://api-m.sandbox.paypal.com/v1/billing/v1/oauth2/token";
|};

# Results of 3D Secure Authentication.
public type three_d_secure_authentication_response record {
    # Transactions status result identifier. The outcome of the issuer's authentication.
    pares_status authentication_status?;
    # Status of Authentication eligibility.
    enrolled enrollment_status?;
};

# The activate subscription request details.
public type subscription_activate_request record {
    # The reason for activation of a subscription. Required to reactivate the subscription.
    @constraint:String {maxLength: 128, minLength: 1}
    string reason?;
};

# The tax details.
public type taxes record {
    # The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`.
    percentage percentage;
    # Indicates whether the tax was already included in the billing amount.
    boolean inclusive = true;
};

# The payment card used to fund the payment. Card can be a credit or debit card.
public type card_response_with_billing_address record {
    *card_response;
    *CardResponseWithBillingAddressAllOf2;
};

# The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).
@constraint:String {maxLength: 10, minLength: 2, pattern: re `^[a-z]{2}(?:-[A-Z][a-z]{3})?(?:-(?:[A-Z]{2}))?$`}
public type language string;

# The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
public type link_description record {
    # The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.
    string href;
    # The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).
    string rel;
    # The HTTP method required to make the related call.
    "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"CONNECT"|"OPTIONS"|"PATCH" method?;
};

# The customer who approves and pays for the order. The customer is also known as the payer.
public type payer record {
    *payer_base;
    *PayerAllOf2;
};

public type TransactionAllOf2 record {
    # The PayPal-generated transaction ID.
    @constraint:String {maxLength: 50, minLength: 3}
    string id?;
    # The breakdown details for the amount. Includes the gross, tax, fee, and shipping amounts.
    amount_with_breakdown amount_with_breakdown?;
    # The name of the party.
    name payer_name?;
    # The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
    email_address payer_email?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time time?;
};

# The frequency of the billing cycle.
public type frequency record {
    # The interval at which the subscription is charged or billed.
    "DAY"|"WEEK"|"MONTH"|"YEAR" interval_unit;
    # The number of intervals after which a subscriber is billed. For example, if the `interval_unit` is `DAY` with an `interval_count` of  `2`, the subscription is billed once every two days. The following table lists the maximum allowed values for the `interval_count` for each `interval_unit`:<table><thead><tr><th><code>Interval unit</code></th><th>Maximum interval count</th></tr></thead><tbody><tr><td><code>DAY</code></td><td align="right">365</td></tr><tr><td><code>WEEK</code></td><td align="right">52</td></tr><tr><td><code>MONTH</code></td><td align="right">12</td></tr><tr><td><code>YEAR</code></td><td align="right">1</td></tr></tbody></table>
    @constraint:Int {minValue: 1, maxValue: 365}
    int interval_count = 1;
};

# The payment card to use to fund a payment. Card can be a credit or debit card.
public type card_response record {
    # The last digits of the payment card.
    @constraint:String {pattern: re `[0-9]{2,}`}
    string last_digits?;
    # The card network or brand. Applies to credit, debit, gift, and payment cards.
    card_brand brand?;
    # The payment card type.
    "CREDIT"|"DEBIT"|"PREPAID"|"UNKNOWN" 'type?;
    # Results of Authentication such as 3D Secure.
    authentication_response authentication_result?;
};

# The JSON patch object to apply partial updates to resources.
public type patch record {
    # The operation.
    "add"|"remove"|"replace"|"move"|"copy"|"test" op;
    # The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location at which to complete the operation.
    string path?;
    # The value to apply. The <code>remove</code> operation does not require a value.
    anydata value?;
    # The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation.
    string 'from?;
};

# The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
@constraint:String {maxLength: 64, minLength: 20, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$`}
public type date_time string;

# The billing cycle details to override at subscription level. The subscription billing cycle definition has to adhere to the plan billing cycle definition.
public type billing_cycle_override record {
    # The pricing scheme details.
    pricing_scheme pricing_scheme?;
    # The order in which this cycle is to run among other billing cycles. For example, a trial billing cycle has a `sequence` of `1` while a regular billing cycle has a `sequence` of `2`, so that trial cycle runs before the regular cycle.
    @constraint:Int {minValue: 1, maxValue: 99}
    int sequence;
    # The number of times this billing cycle gets executed. Trial billing cycles can only be executed a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>). Regular billing cycles can be executed infinite times (value of <code>0</code> for <code>total_cycles</code>) or a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>).
    @constraint:Int {minValue: 0, maxValue: 999}
    int total_cycles?;
};

# The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`.
@constraint:String {pattern: re `^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$`}
public type percentage string;

# The subscription status details.
public type subscription_status record {
    # The status of the subscription.
    "APPROVAL_PENDING"|"APPROVED"|"ACTIVE"|"SUSPENDED"|"CANCELLED"|"EXPIRED" status?;
    # The reason or notes for the status of the subscription.
    @constraint:String {maxLength: 128, minLength: 1}
    string status_change_note?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time status_update_time?;
};

# The pricing tier details.
public type pricing_tier record {
    # The starting quantity for the tier.
    @constraint:String {maxLength: 32, minLength: 1, pattern: re `^([0-9]+|([0-9]+)?[.][0-9]+)$`}
    string starting_quantity;
    # The ending quantity for the tier. Optional for the last tier.
    @constraint:String {maxLength: 32, minLength: 1, pattern: re `^([0-9]+|([0-9]+)?[.][0-9]+)$`}
    string ending_quantity?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount;
};

# The billing cycle details.
public type billing_cycle record {
    # The pricing scheme details.
    pricing_scheme pricing_scheme?;
    # The frequency of the billing cycle.
    frequency frequency;
    # The tenure type of the billing cycle. In case of a plan having trial cycle, only 2 trial cycles are allowed per plan.
    "REGULAR"|"TRIAL" tenure_type;
    # The order in which this cycle is to run among other billing cycles. For example, a trial billing cycle has a `sequence` of `1` while a regular billing cycle has a `sequence` of `2`, so that trial cycle runs before the regular cycle.
    @constraint:Int {minValue: 1, maxValue: 99}
    int sequence;
    # The number of times this billing cycle gets executed. Trial billing cycles can only be executed a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>). Regular billing cycles can be executed infinite times (value of <code>0</code> for <code>total_cycles</code>) or a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>).
    @constraint:Int {minValue: 0, maxValue: 999}
    int total_cycles = 1;
};

# The payment source definition. To be eligible to create subscription using debit or credit card, you will need to sign up here (https://www.paypal.com/bizsignup/entry/product/ppcp). Please note, its available only for non-3DS cards and for merchants in US and AU regions.
public type payment_source record {
    # The payment card to use to fund a payment. Can be a credit or debit card.
    card card?;
};

# Represents the Headers record for the operation: plans.create
public type PlansCreateHeaders record {
    # The server stores keys for 72 hours.
    string PayPal\-Request\-Id?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    string Prefer = "return=minimal";
};

public type SubscriberAllOf2 record {
    # The shipping details.
    shipping_detail shipping_address?;
    # The payment source used to fund the payment.
    payment_source_response payment_source?;
};

# The plan details.
public type plan record {
    # The unique PayPal-generated ID for the plan.
    @constraint:String {maxLength: 50, minLength: 3}
    string id?;
    # The ID for the product.
    @constraint:String {maxLength: 50, minLength: 6}
    string product_id?;
    # The plan name.
    @constraint:String {maxLength: 127, minLength: 1}
    string name?;
    # The plan status.
    "CREATED"|"INACTIVE"|"ACTIVE" status?;
    # The detailed description of the plan.
    @constraint:String {maxLength: 127, minLength: 1}
    string description?;
    # An array of billing cycles for trial billing and regular billing. A plan can have at most two trial cycles and only one regular cycle.
    @constraint:Array {maxLength: 12, minLength: 1}
    billing_cycle[] billing_cycles?;
    # The payment preferences for a subscription.
    payment_preferences payment_preferences?;
    # The tax details.
    taxes taxes?;
    # Indicates whether you can subscribe to this plan by providing a quantity for the goods or service.
    boolean quantity_supported = false;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time create_time?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time update_time?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    @constraint:Array {maxLength: 10, minLength: 1}
    link_description[] links?;
};

# The phone information.
public type phone_with_type record {
    # The phone type.
    phone_type phone_type?;
    # The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
    phone phone_number;
};

# Represents the Queries record for the operation: subscriptions.get
public type SubscriptionsGetQueries record {
    # List of fields that are to be returned in the response. Possible value for fields are last_failed_payment and plan.
    @constraint:String {maxLength: 100, minLength: 1}
    string fields?;
};

# The pricing scheme details.
public type pricing_scheme record {
    # The version of the pricing scheme.
    @constraint:Int {minValue: 0, maxValue: 999}
    int version?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money fixed_price?;
    # The pricing model for tiered plan. The `tiers` parameter is required.
    "VOLUME"|"TIERED" pricing_model?;
    # An array of pricing tiers which are used for billing volume/tiered plans. pricing_model field has to be specified.
    @constraint:Array {maxLength: 32, minLength: 1}
    pricing_tier[] tiers?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time create_time?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time update_time?;
};

# The customer and merchant payment preferences.
public type payment_method record {
    # The customer-selected payment method on the merchant site.
    @constraint:String {minLength: 1, pattern: re `^[0-9A-Z_]+$`}
    string payer_selected = "PAYPAL";
    # The merchant-preferred payment methods.
    payee_payment_method_preference payee_preferred?;
    # NACHA (the regulatory body governing the ACH network) requires that API callers (merchants, partners) obtain the consumer’s explicit authorization before initiating a transaction. To stay compliant, you’ll need to make sure that you retain a compliant authorization for each transaction that you originate to the ACH Network using this API. ACH transactions are categorized (using SEC codes) by how you capture authorization from the Receiver (the person whose bank account is being debited or credited). PayPal supports the following SEC codes.
    "TEL"|"WEB"|"CCD"|"PPD" standard_entry_class_code = "WEB";
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    OAuth2ClientCredentialsGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type SubscriptionReviseResponseAllOf2 record {
    # Indicates whether the subscription has overridden any plan attributes.
    boolean plan_overridden?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    link_description[] links?;
};

public type SubscriptionAllOf2 record {
    # The PayPal-generated ID for the subscription.
    @constraint:String {maxLength: 50, minLength: 3}
    string id?;
    # The ID of the plan.
    @constraint:String {maxLength: 50, minLength: 3}
    string plan_id?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time start_time?;
    # The quantity of the product in the subscription.
    @constraint:String {maxLength: 32, minLength: 1, pattern: re `^([0-9]+|([0-9]+)?[.][0-9]+)$`}
    string quantity?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money shipping_amount?;
    # The subscriber response information.
    subscriber subscriber?;
    # The billing details for the subscription. If the subscription was or is active, these fields are populated.
    subscription_billing_info billing_info?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time create_time?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time update_time?;
    # The custom id for the subscription. Can be invoice id.
    @constraint:String {maxLength: 127, minLength: 1}
    string custom_id?;
    # Indicates whether the subscription has overridden any plan attributes.
    boolean plan_overridden?;
    # The plan details.
    plan plan?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    link_description[] links?;
};

# The create plan request details.
public type plan_request_POST record {
    # The ID of the product created through Catalog Products API.
    @constraint:String {maxLength: 50, minLength: 6}
    string product_id;
    # The plan name.
    @constraint:String {maxLength: 127, minLength: 1}
    string name;
    # The initial state of the plan. Allowed input values are CREATED and ACTIVE.
    "CREATED"|"INACTIVE"|"ACTIVE" status = "ACTIVE";
    # The detailed description of the plan.
    @constraint:String {maxLength: 127, minLength: 1}
    string description?;
    # An array of billing cycles for trial billing and regular billing. A plan can have at most two trial cycles and only one regular cycle.
    @constraint:Array {maxLength: 12, minLength: 1}
    billing_cycle[] billing_cycles;
    # The payment preferences for a subscription.
    payment_preferences payment_preferences;
    # The tax details.
    taxes taxes?;
    # Indicates whether you can subscribe to this plan by providing a quantity for the goods or service.
    boolean quantity_supported = false;
};

# The phone type.
public type phone_type "FAX"|"HOME"|"MOBILE"|"OTHER"|"PAGER";

# The merchant-preferred payment methods.
public type payee_payment_method_preference "UNRESTRICTED"|"IMMEDIATE_PAYMENT_REQUIRED";

# The subscriber response information.
public type subscriber record {
    *payer;
    *SubscriberAllOf2;
};

# The suspend subscription request details.
public type subscription_suspend_request record {
    # The reason for suspenson of the subscription.
    @constraint:String {maxLength: 128, minLength: 1}
    string reason;
};

# The details for the last payment.
public type last_payment_details LastPaymentDetailsAllOf1;

# The request to update the quantity of the product or service in a subscription. You can also use this method to switch the plan and update the `shipping_amount` and `shipping_address` values for the subscription. This type of update requires the buyer's consent.
public type subscription_revise_request record {
    # The unique PayPal-generated ID for the plan.
    @constraint:String {maxLength: 50, minLength: 3}
    string plan_id?;
    # The quantity of the product or service in the subscription.
    @constraint:String {maxLength: 32, minLength: 1, pattern: re `^([0-9]+|([0-9]+)?[.][0-9]+)$`}
    string quantity?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money shipping_amount?;
    # The shipping details.
    shipping_detail shipping_address?;
    # The application context, which customizes the payer experience during the subscription approval process with PayPal.
    application_context application_context?;
    # An inline plan object to customise the subscription. You can override plan level default attributes by providing customised values for the subscription in this object.
    plan_override plan?;
};

# The shipping details.
public type shipping_detail record {
    # The name of the party.
    name name?;
    # The method by which the payer wants to get their items from the payee e.g shipping, in-person pickup. Either type or options but not both may be present.
    "SHIPPING"|"PICKUP_IN_PERSON" 'type?;
    # The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
    address_portable address?;
};

# The response to a request to update the quantity of the product or service in a subscription. You can also use this method to switch the plan and update the `shipping_amount` and `shipping_address` values for the subscription. This type of update requires the buyer's consent.
public type subscription_revise_response record {
    *subscription_revise_request;
    *SubscriptionReviseResponseAllOf2;
};

# The tax details.
public type taxes_override record {
    # The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`.
    percentage percentage?;
    # Indicates whether the tax was already included in the billing amount.
    boolean inclusive?;
};

# The details of the captured payment status.
public type capture_status_details record {
    # The reason why the captured payment status is `PENDING` or `DENIED`.
    "BUYER_COMPLAINT"|"CHARGEBACK"|"ECHECK"|"INTERNATIONAL_WITHDRAWAL"|"OTHER"|"PENDING_REVIEW"|"RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION"|"REFUNDED"|"TRANSACTION_APPROVED_AWAITING_FUNDING"|"UNILATERAL"|"VERIFICATION_REQUIRED" reason?;
};

# The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
@constraint:String {maxLength: 2, minLength: 2, pattern: re `^([A-Z]{2}|C2)$`}
public type country_code string;

# Represents the Headers record for the operation: subscriptions.create
public type SubscriptionsCreateHeaders record {
    # The server stores keys for 72 hours.
    string PayPal\-Request\-Id?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    string Prefer = "return=minimal";
};

# The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required.
public type tax_info record {
    # The customer's tax ID value.
    @constraint:String {maxLength: 14}
    string tax_id;
    # The customer's tax ID type.
    "BR_CPF"|"BR_CNPJ" tax_id_type;
};

# The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
public type phone record {
    # The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
    @constraint:String {maxLength: 3, minLength: 1, pattern: re `^[0-9]{1,3}?$`}
    string country_code;
    # The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
    @constraint:String {maxLength: 14, minLength: 1, pattern: re `^[0-9]{1,14}?$`}
    string national_number;
    # The extension number.
    @constraint:String {maxLength: 15, minLength: 1, pattern: re `^[0-9]{1,15}?$`}
    string extension_number?;
};

# The billing details for the subscription. If the subscription was or is active, these fields are populated.
public type subscription_billing_info record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money outstanding_balance;
    # The trial and regular billing executions.
    @constraint:Array {maxLength: 3}
    cycle_execution[] cycle_executions?;
    # The details for the last payment.
    last_payment_details last_payment?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time next_billing_time?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time final_payment_time?;
    # The number of consecutive payment failures. Resets to `0` after a successful payment. If this reaches the `payment_failure_threshold` value, the subscription updates to the `SUSPENDED` state.
    @constraint:Int {minValue: 0, maxValue: 999}
    int failed_payments_count;
    # The details for the failed payment of the subscription.
    failed_payment_details last_failed_payment?;
};

# Results of Authentication such as 3D Secure.
public type authentication_response record {
    # Liability shift indicator. The outcome of the issuer's authentication.
    liability_shift liability_shift?;
    # Results of 3D Secure Authentication.
    three_d_secure_authentication_response three_d_secure?;
};

# The name of the party.
public type name record {
    # The prefix, or title, to the party's name.
    @constraint:String {maxLength: 140}
    string prefix?;
    # When the party is a person, the party's given, or first, name.
    @constraint:String {maxLength: 140}
    string given_name?;
    # When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname.
    @constraint:String {maxLength: 140}
    string surname?;
    # When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name.
    @constraint:String {maxLength: 140}
    string middle_name?;
    # The suffix for the party's name.
    @constraint:String {maxLength: 140}
    string suffix?;
    # DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.
    @constraint:String {maxLength: 300}
    string alternate_full_name?;
    # When the party is a person, the party's full name.
    @constraint:String {maxLength: 300}
    string full_name?;
};

# The application context, which customizes the payer experience during the subscription approval process with PayPal.
public type application_context record {
    # The label that overrides the business name in the PayPal account on the PayPal site.
    @constraint:String {maxLength: 127, minLength: 1}
    string brand_name?;
    # The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).
    language locale?;
    # The location from which the shipping address is derived.
    "GET_FROM_FILE"|"NO_SHIPPING"|"SET_PROVIDED_ADDRESS" shipping_preference = "GET_FROM_FILE";
    # Configures the label name to `Continue` or `Subscribe Now` for subscription consent experience.
    "CONTINUE"|"SUBSCRIBE_NOW" user_action = "SUBSCRIBE_NOW";
    # The customer and merchant payment preferences.
    payment_method payment_method?;
    # The URL where the customer is redirected after the customer approves the payment.
    @constraint:String {maxLength: 4000, minLength: 10}
    string return_url;
    # The URL where the customer is redirected after the customer cancels the payment.
    @constraint:String {maxLength: 4000, minLength: 10}
    string cancel_url;
};

# The update pricing scheme request details.
public type update_pricing_schemes_list_request record {
    # An array of pricing schemes.
    @constraint:Array {maxLength: 99, minLength: 1}
    update_pricing_scheme_request[] pricing_schemes;
};

# The payment card to use to fund a payment. Can be a credit or debit card.
public type card record {
    # The PayPal-generated ID for the card.
    string id?;
    # The card holder's name as it appears on the card.
    @constraint:String {maxLength: 300}
    string name?;
    # The primary account number (PAN) for the payment card.
    @constraint:String {maxLength: 19, minLength: 13}
    string number;
    # The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
    date_year_month expiry;
    # The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`.
    @constraint:String {pattern: re `[0-9]{3,4}`}
    string security_code?;
    # The last digits of the payment card.
    @constraint:String {pattern: re `[0-9]{2,}`}
    string last_digits?;
    # The card network or brand. Applies to credit, debit, gift, and payment cards.
    card_brand card_type?;
    # The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
    address_portable billing_address?;
};

# The customer who approves and pays for the order. The customer is also known as the payer.
public type payer_base record {
    # The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
    email email_address?;
    # The account identifier for a PayPal account.
    account_id payer_id?;
};

# The regular and trial execution details for a billing cycle.
public type cycle_execution record {
    # The type of the billing cycle.
    "REGULAR"|"TRIAL" tenure_type;
    # The order in which to run this cycle among other billing cycles.
    @constraint:Int {minValue: 0, maxValue: 99}
    int sequence;
    # The number of billing cycles that have completed.
    @constraint:Int {minValue: 0, maxValue: 9999}
    int cycles_completed;
    # For a finite billing cycle, cycles_remaining is the number of remaining cycles. For an infinite billing cycle, cycles_remaining is set as 0.
    @constraint:Int {minValue: 0, maxValue: 9999}
    int cycles_remaining?;
    # The active pricing scheme version for the billing cycle.
    @constraint:Int {minValue: 1, maxValue: 99}
    int current_pricing_scheme_version?;
    # The number of times this billing cycle gets executed. Trial billing cycles can only be executed a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>). Regular billing cycles can be executed infinite times (value of <code>0</code> for <code>total_cycles</code>) or a finite number of times (value between <code>1</code> and <code>999</code> for <code>total_cycles</code>).
    @constraint:Int {minValue: 0, maxValue: 999}
    int total_cycles?;
};

# The payment preferences for a subscription.
public type payment_preferences record {
    # Indicates whether to automatically bill the outstanding amount in the next billing cycle.
    boolean auto_bill_outstanding = true;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money setup_fee?;
    # The action to take on the subscription if the initial payment for the setup fails.
    "CONTINUE"|"CANCEL" setup_fee_failure_action = "CANCEL";
    # The maximum number of payment failures before a subscription is suspended. For example, if `payment_failure_threshold` is `2`, the subscription automatically updates to the `SUSPEND` state if two consecutive payments fail.
    @constraint:Int {minValue: 0, maxValue: 999}
    int payment_failure_threshold = 0;
};

# The charge amount from the subscriber.
public type subscription_capture_request record {
    # The reason or note for the subscription charge.
    @constraint:String {maxLength: 128, minLength: 1}
    string note;
    # The type of capture.
    "OUTSTANDING_BALANCE" capture_type;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount;
};

# The list transactions for a subscription request details.
public type transactions_list record {
    # An array of transactions.
    @constraint:Array {maxLength: 32767}
    'transaction[] transactions?;
    # The total number of items.
    @constraint:Int {minValue: 0, maxValue: 500000000}
    int total_items?;
    # The total number of pages.
    @constraint:Int {minValue: 0, maxValue: 100000000}
    int total_pages?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    @constraint:Array {maxLength: 10, minLength: 1}
    link_description[] links?;
};

# The cancel subscription request details.
public type subscription_cancel_request record {
    # The reason for the cancellation of a subscription.
    @constraint:String {maxLength: 128, minLength: 1}
    string reason;
};

# The subscription details.
public type subscription record {
    *subscription_status;
    *SubscriptionAllOf2;
};

# An array of JSON patch objects to apply partial updates to resources.
public type patch_request patch[];

# The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.
@constraint:String {maxLength: 3, minLength: 3}
public type currency_code string;

# Represents the Queries record for the operation: subscriptions.transactions
public type SubscriptionsTransactionsQueries record {
    # The start time of the range of transactions to list.
    @constraint:String {maxLength: 64, minLength: 20, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$`}
    string start_time;
    # The end time of the range of transactions to list.
    @constraint:String {maxLength: 64, minLength: 20, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$`}
    string end_time;
};

# The update pricing scheme request details.
public type update_pricing_scheme_request record {
    # The billing cycle sequence.
    @constraint:Int {minValue: 1, maxValue: 99}
    int billing_cycle_sequence;
    # The pricing scheme details.
    pricing_scheme pricing_scheme;
};

# The details for the failed payment of the subscription.
public type failed_payment_details record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time time;
    # The reason code for the payment failure.
    "PAYMENT_DENIED"|"INTERNAL_SERVER_ERROR"|"PAYEE_ACCOUNT_RESTRICTED"|"PAYER_ACCOUNT_RESTRICTED"|"PAYER_CANNOT_PAY"|"SENDING_LIMIT_EXCEEDED"|"TRANSACTION_RECEIVING_LIMIT_EXCEEDED"|"CURRENCY_MISMATCH" reason_code?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time next_payment_retry_time?;
};

# The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
@constraint:String {maxLength: 10, minLength: 10, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$`}
public type date_no_time string;

# The payment preferences to override at subscription level.
public type payment_preferences_override record {
    # Indicates whether to automatically bill the outstanding amount in the next billing cycle.
    boolean auto_bill_outstanding?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money setup_fee?;
    # The action to take on the subscription if the initial payment for the setup fails.
    "CONTINUE"|"CANCEL" setup_fee_failure_action?;
    # The maximum number of payment failures before a subscription is suspended. For example, if `payment_failure_threshold` is `2`, the subscription automatically updates to the `SUSPEND` state if two consecutive payments fail.
    @constraint:Int {minValue: 0, maxValue: 999}
    int payment_failure_threshold?;
};

# The subscriber request information .
public type subscriber_request record {
    *payer;
    *SubscriberRequestAllOf2;
};

# An inline plan object to customise the subscription. You can override plan level default attributes by providing customised values for the subscription in this object.
public type plan_override record {
    # An array of billing cycles for trial billing and regular billing. The subscription billing cycle definition has to adhere to the plan billing cycle definition.
    @constraint:Array {maxLength: 12, minLength: 1}
    billing_cycle_override[] billing_cycles?;
    # The payment preferences to override at subscription level.
    payment_preferences_override payment_preferences?;
    # The tax details.
    taxes_override taxes?;
};

# Liability shift indicator. The outcome of the issuer's authentication.
public type liability_shift "YES"|"NO"|"POSSIBLE"|"UNKNOWN";

# The card network or brand. Applies to credit, debit, gift, and payment cards.
public type card_brand "VISA"|"MASTERCARD"|"DISCOVER"|"AMEX"|"SOLO"|"JCB"|"STAR"|"DELTA"|"SWITCH"|"MAESTRO"|"CB_NATIONALE"|"CONFIGOGA"|"CONFIDIS"|"ELECTRON"|"CETELEM"|"CHINA_UNION_PAY";

# Represents the Headers record for the operation: subscriptions.capture
public type SubscriptionsCaptureHeaders record {
    # The server stores keys for 72 hours.
    string PayPal\-Request\-Id?;
};

# Transactions status result identifier. The outcome of the issuer's authentication.
public type pares_status "Y"|"N"|"U"|"A"|"C"|"R"|"D"|"I";

# The create subscription request details.
public type subscription_request_post record {
    # The ID of the plan.
    @constraint:String {maxLength: 50, minLength: 3}
    string plan_id;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time start_time?;
    # The quantity of the product in the subscription.
    @constraint:String {maxLength: 32, minLength: 1, pattern: re `^([0-9]+|([0-9]+)?[.][0-9]+)$`}
    string quantity?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money shipping_amount?;
    # The subscriber request information .
    subscriber_request subscriber?;
    # DEPRECATED. Indicates whether the subscription auto-renews after the billing cycles complete.
    # 
    # # Deprecated
    @deprecated
    boolean auto_renewal = false;
    # The application context, which customizes the payer experience during the subscription approval process with PayPal.
    application_context application_context?;
    # The custom id for the subscription. Can be invoice id.
    @constraint:String {maxLength: 127, minLength: 1}
    string custom_id?;
    # An inline plan object to customise the subscription. You can override plan level default attributes by providing customised values for the subscription in this object.
    plan_override plan?;
};

# The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
public type address_portable record {
    # The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address.
    @constraint:String {maxLength: 300}
    string address_line_1?;
    # The second line of the address. For example, suite or apartment number.
    @constraint:String {maxLength: 300}
    string address_line_2?;
    # The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.
    @constraint:String {maxLength: 100}
    string address_line_3?;
    # The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul>
    @constraint:String {maxLength: 100}
    string admin_area_4?;
    # A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul>
    @constraint:String {maxLength: 100}
    string admin_area_3?;
    # A city, town, or village. Smaller than `admin_area_level_1`.
    @constraint:String {maxLength: 120}
    string admin_area_2?;
    # The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul>
    @constraint:String {maxLength: 300}
    string admin_area_1?;
    # The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).
    @constraint:String {maxLength: 60}
    string postal_code?;
    # The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
    country_code country_code;
    # The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
    AddressDetails address_details?;
};

# The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
@constraint:String {maxLength: 254}
public type email string;

# The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
@constraint:String {maxLength: 7, minLength: 7, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])$`}
public type date_year_month string;

# Status of Authentication eligibility.
public type enrolled "Y"|"N"|"U"|"B";

public type SubscriberRequestAllOf2 record {
    # The shipping details.
    shipping_detail shipping_address?;
    # The payment source definition. To be eligible to create subscription using debit or credit card, you will need to sign up here (https://www.paypal.com/bizsignup/entry/product/ppcp). Please note, its available only for non-3DS cards and for merchants in US and AU regions.
    payment_source payment_source?;
};

# The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
public type AddressDetails record {
    # The street number.
    @constraint:String {maxLength: 100}
    string street_number?;
    # The street name. Just `Drury` in `Drury Lane`.
    @constraint:String {maxLength: 100}
    string street_name?;
    # The street type. For example, avenue, boulevard, road, or expressway.
    @constraint:String {maxLength: 100}
    string street_type?;
    # The delivery service. Post office box, bag number, or post office name.
    @constraint:String {maxLength: 100}
    string delivery_service?;
    # A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>.
    @constraint:String {maxLength: 100}
    string building_name?;
    # The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.
    @constraint:String {maxLength: 100}
    string sub_building?;
};

# Represents the Queries record for the operation: plans.list
public type PlansListQueries record {
    # Filters the response by a Product ID.
    @constraint:String {maxLength: 50, minLength: 6}
    string product_id?;
    # Filters the response by list of plan IDs. Filter supports upto 10 plan IDs.
    string plan_ids?;
    # A non-zero integer which is the start index of the entire list of items to return in the response. The combination of `page=1` and `page_size=20` returns the first 20 items. The combination of `page=2` and `page_size=20` returns the next 20 items.
    @constraint:Int {minValue: 1, maxValue: 100000}
    int page = 1;
    # Indicates whether to show the total count in the response.
    boolean total_required = false;
    # The number of items to return in the response.
    @constraint:Int {minValue: 1, maxValue: 20}
    int page_size = 10;
};

public type 'transaction record {
    *capture_status;
    *TransactionAllOf2;
    date_time time;
    amount_with_breakdown amount_with_breakdown;
    string id;
};

# The status of a captured payment.
public type capture_status record {
    # The status of the captured payment.
    "COMPLETED"|"DECLINED"|"PARTIALLY_REFUNDED"|"PENDING"|"REFUNDED" status?;
    # The details of the captured payment status.
    capture_status_details status_details?;
};

# Represents the Headers record for the operation: plans.list
public type PlansListHeaders record {
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    string Prefer = "return=minimal";
};

# The list of plans with details.
public type plan_collection record {
    # An array of plans.
    @constraint:Array {maxLength: 32767}
    plan[] plans?;
    # The total number of items.
    @constraint:Int {minValue: 0, maxValue: 500000000}
    int total_items?;
    # The total number of pages.
    @constraint:Int {minValue: 0, maxValue: 100000000}
    int total_pages?;
    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    @constraint:Array {maxLength: 10, minLength: 1}
    link_description[] links?;
};

public type CardResponseWithBillingAddressAllOf2 record {
    # The card holder's name as it appears on the card.
    @constraint:String {maxLength: 300, minLength: 2}
    string name?;
    # The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
    address_portable billing_address?;
    # The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
    date_year_month expiry?;
    # The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.
    currency_code currency_code?;
};

public type LastPaymentDetailsAllOf1 record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time time?;
};

# The account identifier for a PayPal account.
@constraint:String {maxLength: 13, minLength: 13, pattern: re `^[2-9A-HJ-NP-Z]{13}$`}
public type account_id string;

# The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
@constraint:String {maxLength: 254, minLength: 3, pattern: re `^.+@[^"\-].+$`}
public type email_address string;

# The currency and amount for a financial transaction, such as a balance or payment due.
public type money record {
    # The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.
    currency_code currency_code;
    # The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/docs/integration/direct/rest/currency-codes/).
    @constraint:String {maxLength: 32, pattern: re `^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$`}
    string value;
};

# The payment source used to fund the payment.
public type payment_source_response record {
    # The payment card used to fund the payment. Card can be a credit or debit card.
    card_response_with_billing_address card?;
};

# The breakdown details for the amount. Includes the gross, tax, fee, and shipping amounts.
public type amount_with_breakdown record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money gross_amount;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money total_item_amount?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money fee_amount?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money shipping_amount?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money tax_amount?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money net_amount?;
};

public type PayerAllOf2 record {
    # The name of the party.
    name name?;
    # The phone information.
    phone_with_type phone?;
    # The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
    date_no_time birth_date?;
    # The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required.
    tax_info tax_info?;
    # The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
    address_portable address?;
};
