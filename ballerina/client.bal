// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/data.jsondata;
import ballerina/http;

# You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href="/docs/subscriptions/">Subscriptions Overview</a>.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api-m.sandbox.paypal.com/v1/billing") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # List plans
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that lists billing plans. 
    resource isolated function get plans(PlansListHeaders headers = {}, *PlansListQueries queries) returns plan_collection|error {
        string resourcePath = string `/plans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Create plan
    #
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows billing plan details. 
    resource isolated function post plans(plan_request_POST payload, PlansCreateHeaders headers = {}) returns plan|error {
        string resourcePath = string `/plans`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Show plan details
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows plan details. 
    resource isolated function get plans/[string id](map<string|string[]> headers = {}) returns plan|error {
        string resourcePath = string `/plans/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update plan
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body. 
    resource isolated function patch plans/[string id](patch_request payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/plans/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Activate plan
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body. 
    resource isolated function post plans/[string id]/activate(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/plans/${getEncodedUri(id)}/activate`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deactivate plan
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body. 
    resource isolated function post plans/[string id]/deactivate(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/plans/${getEncodedUri(id)}/deactivate`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update pricing
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body. 
    resource isolated function post plans/[string id]/update\-pricing\-schemes(update_pricing_schemes_list_request payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/plans/${getEncodedUri(id)}/update-pricing-schemes`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create subscription
    #
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows subscription details. 
    resource isolated function post subscriptions(subscription_request_post payload, SubscriptionsCreateHeaders headers = {}) returns subscription|error {
        string resourcePath = string `/subscriptions`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Show subscription details
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows subscription details. 
    resource isolated function get subscriptions/[string id](map<string|string[]> headers = {}, *SubscriptionsGetQueries queries) returns subscription|error {
        string resourcePath = string `/subscriptions/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update subscription
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body. 
    resource isolated function patch subscriptions/[string id](patch_request payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/subscriptions/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Revise plan or quantity of subscription
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows subscription details. 
    resource isolated function post subscriptions/[string id]/revise(subscription_revise_request payload, map<string|string[]> headers = {}) returns subscription_revise_response|error {
        string resourcePath = string `/subscriptions/${getEncodedUri(id)}/revise`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Suspend subscription
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body. 
    resource isolated function post subscriptions/[string id]/suspend(subscription_suspend_request payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/subscriptions/${getEncodedUri(id)}/suspend`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancel subscription
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body. 
    resource isolated function post subscriptions/[string id]/cancel(subscription_cancel_request payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/subscriptions/${getEncodedUri(id)}/cancel`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Activate subscription
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body. 
    resource isolated function post subscriptions/[string id]/activate(subscription_activate_request payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/subscriptions/${getEncodedUri(id)}/activate`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Capture authorized payment on subscription
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows subscription details. 
    resource isolated function post subscriptions/[string id]/capture(subscription_capture_request payload, SubscriptionsCaptureHeaders headers = {}) returns 'transaction|error? {
        string resourcePath = string `/subscriptions/${getEncodedUri(id)}/capture`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # List transactions for subscription
    #
    # + id - The ID of the subscription.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows subscription details. 
    resource isolated function get subscriptions/[string id]/transactions(map<string|string[]> headers = {}, *SubscriptionsTransactionsQueries queries) returns transactions_list|error {
        string resourcePath = string `/subscriptions/${getEncodedUri(id)}/transactions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }
}
